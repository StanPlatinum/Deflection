.global expm1l
.type expm1l,@function
expm1l:
	fldt 8(%rsp)
	fldl2e
	fmulp
	movl $0xc2820000,-4(%rsp)
	flds -4(%rsp)
	fucomip %st(1)
	fld1
	jb 1f
		# x*log2e <= -65, return -1 without underflow
    jmp BB0		# instrumented
BB0:		# instrumented
	fstp %st(1)
	fchs
	ret
1:
	fld %st(1)
	fabs
	fucomip %st(1)
	fstp %st(0)
	ja 1f
    jmp BB1		# instrumented
BB1:		# instrumented
	f2xm1
	ret
1:
	push %rax
	call 1f
	pop %rax
	fld1
	fsubrp
	ret
.global exp2l
.type exp2l,@function
exp2l:
	fldt 8(%rsp)
    jmp 1f		# instrumented
1:
	fld %st(0)
	sub $16,%rsp
	fstpt (%rsp)
	mov 8(%rsp),%ax
	and $0x7fff,%ax
	cmp $0x3fff+13,%ax
	jb 4f             # |x| < 8192
    jmp BB2		# instrumented
BB2:		# instrumented
	cmp $0x3fff+15,%ax
	jae 3f            # |x| >= 32768
    jmp BB3		# instrumented
BB3:		# instrumented
	fsts (%rsp)
	cmpl $0xc67ff800,(%rsp)
	jb 2f             # x > -16382
    jmp BB4		# instrumented
BB4:		# instrumented
	movl $0x5f000000,(%rsp)
	flds (%rsp)       # 0x1p63
	fld %st(1)
	fsub %st(1)
	faddp
	fucomip %st(1)
	je 2f             # x - 0x1p63 + 0x1p63 == x
    jmp BB5		# instrumented
BB5:		# instrumented
	movl $1,(%rsp)
	flds (%rsp)       # 0x1p-149
	fdiv %st(1)
	fstps (%rsp)      # raise underflow
    jmp 2f		# instrumented
2:
	fld1
	fld %st(1)
	frndint
	fxch %st(2)
	fsub %st(2)       # st(0)=x-rint(x), st(1)=1, st(2)=rint(x)
	f2xm1
	faddp             # 2^(x-rint(x))
    jmp 1f		# instrumented
1:
	fscale
	fstp %st(1)
	add $16,%rsp
	ret
3:
	xor %eax,%eax
    jmp 4f		# instrumented
4:
	cmp $0x3fff-64,%ax
	fld1
	jb 1b             # |x| < 0x1p-64
    jmp BB6		# instrumented
BB6:		# instrumented
	fstpt (%rsp)
	fistl 8(%rsp)
	fildl 8(%rsp)
	fsubrp %st(1)
	addl $0x3fff,8(%rsp)
	f2xm1
	fld1
	faddp             # 2^(x-rint(x))
	fldt (%rsp)       # 2^rint(x)
	fmulp
	add $16,%rsp
	ret
